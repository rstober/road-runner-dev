---
- hosts: all
  gather_facts: true
  #vars_files:
  #  - /root/.road-runner/install_config.yaml
 
  tasks:
      
    - name: Touch {{ ansible_local['custom']['install_dir'] }}/roles/software_images/tasks/main.yaml
      ansible.builtin.file:
        path: "{{ ansible_local['custom']['install_dir'] }}/roles/software_images/tasks/main.yaml"
        state: touch
      
    - name: Write playbook {{ ansible_local['custom']['install_dir'] }}/roles/software_images/tasks/main.yaml
      ansible.builtin.blockinfile:
        insertafter: EOF
        path: "{{ ansible_local['custom']['install_dir'] }}/roles/software_images/tasks/main.yaml" 
        block: "{{ lookup('template', 'templates/clone-software-images.j2') }}"
        marker: ""
      loop: "{{ ansible_local['custom']['software_images'] }}"
      
    # {% for image in ansible_local['custom']['software_images'] %}
    # data_dir = {{ dir }}
    # {% endfor %}
      
    # - name: list all software images
      # brightcomputing.bcm92.software_image_info: {}
      # register: result
      
    # - name: Get list of modules from existing Bright software images
      # set_fact:
        # images_need_modules: "{{ result.software_images }}"
        
    # - name: List of modules in existing software images
      # set_fact: combined_module_list="{{ item.modules + ansible_local['custom']['software_images'] | selectattr('name', '==', item.name) | map(attribute='modules') }}"
      # loop: "{{ images_need_modules | flatten(levels=1) }}"
      # loop_control:
        # label: "{{ item.name }}"
      # register: foo
        
    # - name: Print contents of combined_module_list
      # debug:
        # msg: "{{ combined_module_list | flatten(levels=1) }}"
        
    # - debug: msg="item={{ item }}"
      # with_items: "{{ foo.results }}"
        
    # - name: Write playbook {{ ansible_local['custom']['install_dir'] }}/roles/software_images/tasks/main.yaml
      # ansible.builtin.blockinfile:
        # insertafter: EOF
        # path: "{{ ansible_local['custom']['install_dir'] }}/roles/software_images/tasks/main.yaml" 
        # block: "{{ lookup('template', 'templates/append-kernel-modules.j2') }}"
        # marker: ""
      # loop: "{{ result.software_images | rejectattr(''modules'', ''none'') }}"
        
    # - name: List of modules that need to be added
      # debug:
        # msg: "{{ item.modules }}"
      # with_items:
        # - "{{ ansible_local['custom']['software_images'] | rejectattr('modules','none') }}"
        
    # - name: Get list of images that need kernel modules added to them
      # set_fact:
        # install_modules_into_images: "{{ ansible_local['custom']['software_images'] | rejectattr(''modules'',''none'') }}"
        
    # -name: Combine new and existing module lists
     # set_fact: 
       # combined_module_list: "{{ images_need_modules.modules + install_modules_into_images }}"
        
    
        
    # - name: display custom software images
      # debug:
        # msg:
        # - "custom_images.modules: {{ ansible_local['custom']['software_images'] | type_debug }}"
        # - "custom_images.modules: {{ ansible_local['custom']['software_images'] | rejectattr(''modules'',''none'') }}"
      # loop: {{ install_modules_into_images }}
      # loop_control:
        # label: "{{ item.name }}"
        
    # - name: debug display all software images
      # debug:
        # msg:
          # - "name: {{ item.name }}"
          # - "path: {{ item.path }}"
          # - "creation time: {{ item.creationTime }}"
          # - "kernel version: {{ item.kernelVersion }}"
          # - "kernel modules names: {{ item.modules }}"
          # #- "kernel modules names: {{item.modules|map(attribute='name')|join(' ')}}"
      # loop: "{{ images_need_modules }}"
      # loop_control:
        # label: "{{ item.name }}"
        
    # - name: "Loop"
      # command: "echo {{ item }}"
      # with_items: [ 0, 2, 4, 6, 8, 10 ]
      # register: hello
    # - debug:
        # msg: "{{item.stdout}}"
      # with_items: "{{hello.results}}"
      
    # - name: Append new modules to existing
      # set_fact:
        # devices: "{{ images_need_modules.modules | combine({item: 'modules'}) }}"
      # with_items: "{{ ansible_local['custom']['software_images'][1]['modules'] }}"
      
    # - name: Merge the two lists
      # set_fact:
        # lists_merged: "{{ images_need_modules.modules + ansible_local['custom']['software_images'][1]['modules'] }}"
      
    # - name: evaluate the merged list
      # debug:
        # msg:
        # - "lists_merged type: {{ lists_merged | type_debug }}"
        # - "lists_merged: {{ lists_merged }}"
        # - "lists_merged[0] type: {{ lists_merged[0] | type_debug }}"
        # - "lists_merged[0]: {{ lists_merged[0] }}"

        
    # - name: Print some debug information 
      # vars: 
        # msg: | 
          
          # {{ ansible_local['custom']['software_images'] | to_nice_json }} 
          
      # debug: 
        # msg: "{{ msg.split('\n') }}"       
      # tags: debug_info
      
      
        
