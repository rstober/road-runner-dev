{% for image in ansible_local['custom']['software_images'] %}
{% for im in images_need_modules %}
{% if image.modules is not none %}
{% if im.name == image.name %}
- name: Check if /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log exists
  ansible.builtin.stat:
    path: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log
  register: check_file_name
    
- name: Backup /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log to /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log.sav
  ansible.builtin.copy:
    src: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log
    dest: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log.sav
  when: check_file_name.stat.exists
  
- name: Remove old file
  ansible.builtin.file:
    path: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log
    state: absent
  when: check_file_name.stat.exists

- name: Add kernel modules to {{ image.name }} software image
  brightcomputing.bcm92.software_image:
    name: {{ image.name }}
    modules: {{ im.modules + image.modules }}

{% elif image.name == image.backup and loop.last %}
- name: Check if /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log exists
  ansible.builtin.stat:
    path: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log
  register: check_file_name
    
- name: Backup /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log to /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log.sav
  ansible.builtin.copy:
    src: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log
    dest: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log.sav
  when: check_file_name.stat.exists
  
- name: Remove old file
  ansible.builtin.file:
    path: /var/spool/cmd/ramdisk/image-{{ image['backup'] }}.log
    state: absent
  when: check_file_name.stat.exists

- name: Add kernel modules to {{ image.name }} software image
  brightcomputing.bcm92.software_image:
    name: {{ image.name }}
    modules: {{ images_need_modules[0]['modules'] + image.modules }}

{% endif %}
{% endif %}
{% endfor %}
{% endfor %}
